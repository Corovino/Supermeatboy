package level;
import java.awt.Color;
import java.awt.Component;
import java.awt.Dimension;
import java.awt.Graphics;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.File;
import java.io.IOException;
import java.util.ArrayList;
import sprites.MeatBoy;
import platform.Platform;
import tile.TileSet;
import tile.Tile;
import javax.swing.*;
import javax.swing.text.Document;
import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.parsers.ParserConfigurationException;
import javax.xml.xpath.XPath;
import javax.xml.xpath.XPathExpressionException;
import javax.xml.xpath.XPathFactory;

import org.xml.sax.SAXException;


public class MeatBoyLevel extends JPanel implements ActionListener{
	private Timer time;
	private MeatBoy player;
	private int width= 2000;
	private int height= 2000;
	private int frame_width;
	private int frame_height;
	private ArrayList<Platform> platformList;
	private int xscroll;
	private int yscroll;
	private TileSet t1;
	private TileSet t2;
	private ArrayList<Tile> arr1;
	private ArrayList<Tile> arr2;
	public MeatBoyLevel(Component c)   {
		platformList = new ArrayList<Platform>();
		xscroll=0;
		yscroll=0;
		frame_height=c.getHeight();
		frame_width=c.getWidth();
		width=2000;
		height=2000;
		
		t1 = new TileSet(20,20,"resources/forestbg.png",600,600,900,1);
		t2 = new TileSet(20,20,"resources/foresttiles01.png",600,600,57,1);
		t1.load();
		t2.load();
		arr1=t1.getTiles();
		arr2=t2.getTiles();
		
		this.setOpaque(true);
		this.setBackground(Color.white);
		player = new MeatBoy(c,this);	
		
		time=new Timer(40,this);
		time.start();
		
	}
	public void update(){
		player.move();
		xscroll=player.getXScroll()-frame_width/2;
		yscroll=player.getYScroll()-frame_height/2;
		if(xscroll<0)
			xscroll=0;
		if(yscroll<0)
			yscroll=0;
		if(xscroll>width-frame_width)
			xscroll=width-frame_width;
		if(yscroll>height-frame_height)
			yscroll=height-frame_height;
		player.setXScroll(xscroll);
		player.setYScroll(yscroll);
	
		for(int i=0;i<platformList.size();i++){
			platformList.get(i).setScroll(xscroll,yscroll);
		}
		
	}
	public void paintComponent(Graphics g){
		super.paintComponent(g);
		player.draw(g);	
		for(Platform p:platformList){
			p.draw(g);
		}
	}
	public ArrayList<Platform> getPlatforms(){
		return platformList;
	}
	public void actionPerformed(ActionEvent e){
		update();
		repaint();
	}
	public int getWidth(){
		return width;
	}
	public int getHeight(){
		return height;
	}
	public int getXScroll(){
		return xscroll;
	}
	public int getYScroll(){
		return yscroll;
	}
	public void reader(String fname) throws XPathExpressionException, SAXException, ParserConfigurationException, IOException{
		DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
		DocumentBuilder builder = factory.newDocumentBuilder();
		XPathFactory xpfactory = XPathFactory.newInstance();
      	XPath path = xpfactory.newXPath();
		File f = new File("resources/map1.tmx");
		Document doc = (Document) builder.parse(f);
		int numTileSets = Integer.parseInt(path.evaluate("counts(layer)", doc));
		for(int i=1;i<=numTileSets;i++){
			int w=Integer.parseInt(path.evaluate("/map/tileset["+i+"]/@tilewidth", doc));
			int h=Integer.parseInt(path.evaluate("/map/tileset["+i+"]/@tileheight", doc));
			int firstgid=Integer.parseInt(path.evaluate("/map/tileset["+i+"]/@firstgid", doc));
			int imagewidth=Integer.parseInt(path.evaluate("/map/tileset["+i+"]/image/@width", doc));
			int imageheight =Integer.parseInt(path.evaluate("/map/tileset["+i+"]/image/@height", doc));
			String src=path.evaluate("/map/tileset["+i+"]/image/@source", doc);
			//make tileset			
		}
		int count = Integer.parseInt(path.evaluate("counts(layer)", doc));
		for (int i = 1; i <= count; i++)
		{
		}
	}
}
